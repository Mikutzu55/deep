{"ast":null,"code":"import{initializeApp}from'firebase/app';import{getAuth,GoogleAuthProvider,signInWithPopup,signInWithRedirect,OAuthProvider}from'firebase/auth';import{getFirestore}from'firebase/firestore';import{getStorage}from'firebase/storage';import{onAuthStateChanged}from'firebase/auth';import{getDoc,doc,setDoc}from'firebase/firestore';const firebaseConfig={apiKey:process.env.REACT_APP_FIREBASE_API_KEY,authDomain:process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,projectId:process.env.REACT_APP_FIREBASE_PROJECT_ID,storageBucket:process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,messagingSenderId:process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,appId:process.env.REACT_APP_FIREBASE_APP_ID,measurementId:process.env.REACT_APP_FIREBASE_MEASUREMENT_ID};if(!firebaseConfig.apiKey){console.error('Missing Firebase configuration!');throw new Error('Firebase configuration error');}const app=initializeApp(firebaseConfig);const auth=getAuth(app);const db=getFirestore(app);const storage=getStorage(app);// Google and Apple Providers\nconst googleProvider=new GoogleAuthProvider();const appleProvider=new OAuthProvider('apple.com');export{auth,db,storage,googleProvider,appleProvider,signInWithPopup,signInWithRedirect};export default app;// Add user profile creation\nonAuthStateChanged(auth,async user=>{if(user){const userRef=doc(db,'users',user.uid);const docSnap=await getDoc(userRef);if(!docSnap.exists()){await setDoc(userRef,{email:user.email,phone:user.phoneNumber||'',membership:'Free',searches:[],createdAt:new Date()});}}});","map":{"version":3,"names":["initializeApp","getAuth","GoogleAuthProvider","signInWithPopup","signInWithRedirect","OAuthProvider","getFirestore","getStorage","onAuthStateChanged","getDoc","doc","setDoc","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","measurementId","REACT_APP_FIREBASE_MEASUREMENT_ID","console","error","Error","app","auth","db","storage","googleProvider","appleProvider","user","userRef","uid","docSnap","exists","email","phone","phoneNumber","membership","searches","createdAt","Date"],"sources":["C:/Users/Edi/Desktop/MyWebsite/src/firebase.js"],"sourcesContent":["import { initializeApp } from 'firebase/app';\r\nimport {\r\n  getAuth,\r\n  GoogleAuthProvider,\r\n  signInWithPopup,\r\n  signInWithRedirect,\r\n  OAuthProvider,\r\n} from 'firebase/auth';\r\nimport { getFirestore } from 'firebase/firestore';\r\nimport { getStorage } from 'firebase/storage';\r\nimport { onAuthStateChanged } from 'firebase/auth';\r\nimport { getDoc, doc, setDoc } from 'firebase/firestore';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\r\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,\r\n};\r\n\r\nif (!firebaseConfig.apiKey) {\r\n  console.error('Missing Firebase configuration!');\r\n  throw new Error('Firebase configuration error');\r\n}\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nconst auth = getAuth(app);\r\nconst db = getFirestore(app);\r\nconst storage = getStorage(app);\r\n\r\n// Google and Apple Providers\r\nconst googleProvider = new GoogleAuthProvider();\r\nconst appleProvider = new OAuthProvider('apple.com');\r\n\r\nexport {\r\n  auth,\r\n  db,\r\n  storage,\r\n  googleProvider,\r\n  appleProvider,\r\n  signInWithPopup,\r\n  signInWithRedirect,\r\n};\r\nexport default app;\r\n// Add user profile creation\r\nonAuthStateChanged(auth, async (user) => {\r\n  if (user) {\r\n    const userRef = doc(db, 'users', user.uid);\r\n    const docSnap = await getDoc(userRef);\r\n    if (!docSnap.exists()) {\r\n      await setDoc(userRef, {\r\n        email: user.email,\r\n        phone: user.phoneNumber || '',\r\n        membership: 'Free',\r\n        searches: [],\r\n        createdAt: new Date(),\r\n      });\r\n    }\r\n  }\r\n});\r\n"],"mappings":"AAAA,OAASA,aAAa,KAAQ,cAAc,CAC5C,OACEC,OAAO,CACPC,kBAAkB,CAClBC,eAAe,CACfC,kBAAkB,CAClBC,aAAa,KACR,eAAe,CACtB,OAASC,YAAY,KAAQ,oBAAoB,CACjD,OAASC,UAAU,KAAQ,kBAAkB,CAC7C,OAASC,kBAAkB,KAAQ,eAAe,CAClD,OAASC,MAAM,CAAEC,GAAG,CAAEC,MAAM,KAAQ,oBAAoB,CAExD,KAAM,CAAAC,cAAc,CAAG,CACrBC,MAAM,CAAEC,OAAO,CAACC,GAAG,CAACC,0BAA0B,CAC9CC,UAAU,CAAEH,OAAO,CAACC,GAAG,CAACG,8BAA8B,CACtDC,SAAS,CAAEL,OAAO,CAACC,GAAG,CAACK,6BAA6B,CACpDC,aAAa,CAAEP,OAAO,CAACC,GAAG,CAACO,iCAAiC,CAC5DC,iBAAiB,CAAET,OAAO,CAACC,GAAG,CAACS,sCAAsC,CACrEC,KAAK,CAAEX,OAAO,CAACC,GAAG,CAACW,yBAAyB,CAC5CC,aAAa,CAAEb,OAAO,CAACC,GAAG,CAACa,iCAC7B,CAAC,CAED,GAAI,CAAChB,cAAc,CAACC,MAAM,CAAE,CAC1BgB,OAAO,CAACC,KAAK,CAAC,iCAAiC,CAAC,CAChD,KAAM,IAAI,CAAAC,KAAK,CAAC,8BAA8B,CAAC,CACjD,CAEA,KAAM,CAAAC,GAAG,CAAGhC,aAAa,CAACY,cAAc,CAAC,CACzC,KAAM,CAAAqB,IAAI,CAAGhC,OAAO,CAAC+B,GAAG,CAAC,CACzB,KAAM,CAAAE,EAAE,CAAG5B,YAAY,CAAC0B,GAAG,CAAC,CAC5B,KAAM,CAAAG,OAAO,CAAG5B,UAAU,CAACyB,GAAG,CAAC,CAE/B;AACA,KAAM,CAAAI,cAAc,CAAG,GAAI,CAAAlC,kBAAkB,CAAC,CAAC,CAC/C,KAAM,CAAAmC,aAAa,CAAG,GAAI,CAAAhC,aAAa,CAAC,WAAW,CAAC,CAEpD,OACE4B,IAAI,CACJC,EAAE,CACFC,OAAO,CACPC,cAAc,CACdC,aAAa,CACblC,eAAe,CACfC,kBAAkB,EAEpB,cAAe,CAAA4B,GAAG,CAClB;AACAxB,kBAAkB,CAACyB,IAAI,CAAE,KAAO,CAAAK,IAAI,EAAK,CACvC,GAAIA,IAAI,CAAE,CACR,KAAM,CAAAC,OAAO,CAAG7B,GAAG,CAACwB,EAAE,CAAE,OAAO,CAAEI,IAAI,CAACE,GAAG,CAAC,CAC1C,KAAM,CAAAC,OAAO,CAAG,KAAM,CAAAhC,MAAM,CAAC8B,OAAO,CAAC,CACrC,GAAI,CAACE,OAAO,CAACC,MAAM,CAAC,CAAC,CAAE,CACrB,KAAM,CAAA/B,MAAM,CAAC4B,OAAO,CAAE,CACpBI,KAAK,CAAEL,IAAI,CAACK,KAAK,CACjBC,KAAK,CAAEN,IAAI,CAACO,WAAW,EAAI,EAAE,CAC7BC,UAAU,CAAE,MAAM,CAClBC,QAAQ,CAAE,EAAE,CACZC,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CACtB,CAAC,CAAC,CACJ,CACF,CACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}